{"version":3,"sources":["tools.js","data.js","components/scroll-ani.js","components/testos.js","components/tx-slider.js","layout/dark-mode.js"],"names":["lg","val","console","log","$S","selector","document","querySelector","$A","querySelectorAll","html","documentElement","c","_","classList","toggle","d","getAttribute","setAttribute","textSlider","wordList","Interval","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","add","hiddenElements","el","observe","testoCurrentIndex","quotes","quoteWrapper","dots","updateSlider","style","transform","dot","remove","nextQuote","length","resetTimer","prevQuote","goToQuote","index","autoSlide","setInterval","clearInterval","txsldCurrentIndex","dynamicWordElement","changeWord","textContent","window","matchMedia","matches","addEventListener","e","newColorScheme"],"mappings":"AACA,MAAAA,EAAAC,GAAAC,QAAAC,IAAAF,GACAG,EAAAC,GAAAC,SAAAC,cAAAF,GACAG,EAAAH,GAAAC,SAAAG,iBAAAJ,GACAK,EAAAJ,SAAAK,gBAKAC,EAAAC,GAAAH,EAAAI,UAAAC,OAAA,SAKAC,EAAAH,IACAH,EAAAO,aAAA,eAAA,SAAAP,EAAAO,aAAA,cAIAP,EAAAQ,aAAA,aAAA,SAHAR,EAAAQ,aAAA,aAAA,OAIA,ECpBAC,EAAA,CACAC,SAAA,CAAA,SAAA,SAAA,SACAC,SAAA,KCDAC,EAAA,IAAAC,sBAAAC,IACAA,EAAAC,SAAAC,IACAA,EAAAC,gBACAD,EAAAE,OAAAd,UAAAe,IAAA,OACA,GAKA,IAGAC,EAAAxB,SAAAG,iBAAA,WACAqB,EAAAL,SAAAM,GAAAT,EAAAU,QAAAD,KCdA,IAAAE,EAAA,EACA,MAAAC,EAAA5B,SAAAG,iBAAA,UACA0B,EAAA7B,SAAAC,cAAA,kBACA6B,EAAA9B,SAAAG,iBAAA,QAIA,SAAA4B,IAEAF,EAAAG,MAAAC,UAAA,cAAA,IAAAN,MACAG,EAAAX,SAAAe,GAAAA,EAAA1B,UAAA2B,OAAA,YACAL,EAAAH,GAAAnB,UAAAe,IAAA,SACA,CAEA,SAAAa,YAEAT,GAAAA,EAAA,EAAAC,EAAAS,QAAAT,EAAAS,OACAN,IACAO,GACA,CAEA,SAAAC,YAEAZ,GAAAA,EAAA,GAAAC,EAAAS,OACAN,IACAO,GACA,CAEA,SAAAE,UAAAC,GACAd,EAAAc,EACAV,IACAO,GACA,CA3BAR,EAAA,GAAAtB,UAAAe,IAAA,UA6BA,IAAAmB,EAAAC,YAAAP,UAAA,KAEA,SAAAE,IACAM,cAAAF,GACAA,EAAAC,YAAAP,UAAA,IACA,CCvCA,IAAAS,EAAA,EACA,MAAAC,EAAA9C,SAAAC,cAAA,iBAEA8C,EAAAxC,IACAsC,GAAAA,EAAA,GAAAhC,EAAAC,SAAAuB,OACAS,EAAAE,YAAAnC,EAAAC,SAAA+B,EAAA,EAGAF,YAAAI,EAAAlC,EAAAE,UACAgC,ICRAE,OAAAC,YACAD,OAAAC,WAAA,gCAAAC,QAEA/C,EAAAQ,aAAA,aAAA,QAEAR,EAAAQ,aAAA,aAAA,SAGAqC,OAAAC,WAAA,gCAAAE,iBACA,UAAAC,IACA,MAAAC,EAAAD,EAAAF,QAAA,OAAA,QACA/C,EAAAQ,aAAA,aAAA0C,EAAA","file":"../scripts.js","sourcesContent":["// - Basic\nconst lg = val => console.log(val)\nconst $S = selector => document.querySelector(selector)\nconst $A = selector => document.querySelectorAll(selector)\nconst html = document.documentElement\n\n\n\n// - Utils\nconst c = _ => html.classList.toggle(\"debug\")  // _ Toggle CSS Debug\n\n\n\n// - Toggle Theme On The Spot\nconst d = _ => {\n    if (!html.getAttribute(\"data-theme\") || html.getAttribute(\"data-theme\") == \"light\") {\n        html.setAttribute(\"data-theme\", \"dark\")\n    }\n    else {\n        html.setAttribute(\"data-theme\", \"light\")\n    }   \n}\n","const textSlider = {\n    wordList: ['ثلاجات', 'غسالات', 'شاشات'],\n    Interval: 3e3  // _ Same as animation duration\n}\n","\nconst observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            entry.target.classList.add('show')\n        }\n        //-- Commented so that the website is animated only once\n        // else {\n        //     entry.target.classList.remove('show')\n        // }\n    })\n})\n\nconst hiddenElements = document.querySelectorAll('.hidden')\nhiddenElements.forEach(el => observer.observe(el))\n","let testoCurrentIndex = 0;\nconst quotes = document.querySelectorAll(\".quote\");\nconst quoteWrapper = document.querySelector(\".quote-wrapper\");\nconst dots = document.querySelectorAll(\".dot\");\n\ndots[0].classList.add(\"active\")\n\nfunction updateSlider() {\n    // quoteWrapper.style.transform = `translateX(-${testoCurrentIndex * 100}%)`;\n    quoteWrapper.style.transform = `translateX(${testoCurrentIndex * 100}%)`;  // _ direction: rtl\n    dots.forEach((dot) => dot.classList.remove(\"active\"));\n    dots[testoCurrentIndex].classList.add(\"active\");\n}\n\nfunction nextQuote() {\n    // testoCurrentIndex = (testoCurrentIndex + 1) % quotes.length;\n    testoCurrentIndex = (testoCurrentIndex - 1 + quotes.length) % quotes.length;    // _ direction: rtl\n    updateSlider();\n    resetTimer();\n}\n\nfunction prevQuote() {\n    // testoCurrentIndex = (testoCurrentIndex - 1 + quotes.length) % quotes.length;\n    testoCurrentIndex = (testoCurrentIndex + 1) % quotes.length;    // _ direction: rtl\n    updateSlider();\n    resetTimer();\n}\n\nfunction goToQuote(index) {\n    testoCurrentIndex = index;\n    updateSlider();\n    resetTimer();\n}\n\nlet autoSlide = setInterval(nextQuote, 5000);\n\nfunction resetTimer() {\n    clearInterval(autoSlide);\n    autoSlide = setInterval(nextQuote, 5000);\n}\n","let txsldCurrentIndex = 0\nconst dynamicWordElement = document.querySelector('.dynamic-word')\n\nconst changeWord = _ => {\n    txsldCurrentIndex = (txsldCurrentIndex + 1) % textSlider.wordList.length\n    dynamicWordElement.textContent = textSlider.wordList[txsldCurrentIndex]\n}\n\nsetInterval(changeWord, textSlider.Interval)\nchangeWord()","if (\n    window.matchMedia && \n    window.matchMedia('(prefers-color-scheme: dark)').matches\n) {\n    html.setAttribute(\"data-theme\", \"dark\")\n} else {\n    html.setAttribute(\"data-theme\", \"light\")\n}\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener(\n    'change', e => {\n        const newColorScheme = e.matches ? \"dark\" : \"light\"\n        html.setAttribute(\"data-theme\", newColorScheme)\n    }\n)"]}