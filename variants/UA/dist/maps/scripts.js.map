{"version":3,"sources":["tools.js","data.js","components/pop-form.js","components/scroll-ani.js","components/testos.js","components/tx-slider.js","layout/dark-mode.js"],"names":["lg","val","console","log","$S","selector","document","querySelector","$A","querySelectorAll","html","documentElement","c","_","classList","toggle","d","getAttribute","setAttribute","textSlider","wordList","Interval","disableScroll","body","style","overflow","enableScroll","closeForm","remove","getElementById","addEventListener","event","preventDefault","add","target","contains","this","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","hiddenElements","el","observe","testoCurrentIndex","quotes","quoteWrapper","dots","startX","currentX","isDragging","updateSlider","transform","dot","nextQuote","length","resetTimer","prevQuote","goToQuote","index","autoSlide","setInterval","clearInterval","e","touches","clientX","transition","diffX","txsldCurrentIndex","dynamicWordElement","changeWord","textContent","window","matchMedia","matches","newColorScheme"],"mappings":"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","file":"../scripts.js","sourcesContent":["// - Basic\nconst lg = val => console.log(val)\nconst $S = selector => document.querySelector(selector)\nconst $A = selector => document.querySelectorAll(selector)\nconst html = document.documentElement\n\n\n\n// - Utils\nconst c = _ => html.classList.toggle(\"debug\")  // _ Toggle CSS Debug\n\n\n\n// - Toggle Theme On The Spot\nconst d = _ => {\n    if (!html.getAttribute(\"data-theme\") || html.getAttribute(\"data-theme\") == \"light\") {\n        html.setAttribute(\"data-theme\", \"dark\")\n    }\n    else {\n        html.setAttribute(\"data-theme\", \"light\")\n    }   \n}\n","const textSlider = {\n    wordList: ['ثلاجات', 'غسالات', 'شاشات'],\n    Interval: 3e3  // _ Same as animation duration\n}\n","const disableScroll = _ => document.body.style.overflow = \"hidden\"\nconst enableScroll = _ => document.body.style.overflow = \"\"\nconst closeForm = _ => {\n    document.querySelector(\".pop-form-bg\").classList.remove(\"visible\")\n    enableScroll()\n}\n\ndocument\n    .getElementById(\"pop-form-open-btn\")\n    .addEventListener(\"click\", function (event) {\n        event.preventDefault()\n        document.querySelector(\".pop-form-bg\").classList.add(\"visible\")\n        disableScroll()\n    })\n\ndocument\n    .querySelector(\".pop-form-bg\")\n    .addEventListener(\"click\", function (event) {\n        if (\n            // event.target.id === \"pop-form-close-btn\"  ||\n            event.target.classList.contains(\"pop-form-bg\")\n        ) {\n            event.preventDefault()\n            this.classList.remove(\"visible\")\n            enableScroll()\n        }\n    })\n","\nconst observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            entry.target.classList.add('show')\n        }\n        //-- Commented so that the website is animated only once\n        // else {\n        //     entry.target.classList.remove('show')\n        // }\n    })\n})\n\nconst hiddenElements = document.querySelectorAll('.hidden')\nhiddenElements.forEach(el => observer.observe(el))\n","let testoCurrentIndex = 0;\nconst quotes = document.querySelectorAll(\".quote\")\nconst quoteWrapper = document.querySelector(\".quote-wrapper\")\nconst dots = document.querySelectorAll(\".dot\")\n\ndots[0].classList.add(\"active\")\n\nlet startX = 0\nlet currentX = 0\nlet isDragging = false\n\nfunction updateSlider() {\n    quoteWrapper.style.transform = `translateX(${testoCurrentIndex * 100}%)`; // _ direction: rtl\n    dots.forEach((dot) => dot.classList.remove(\"active\"))\n    dots[testoCurrentIndex].classList.add(\"active\")\n}\n\nfunction nextQuote() {\n    testoCurrentIndex = (testoCurrentIndex - 1 + quotes.length) % quotes.length; // _ direction: rtl\n    updateSlider()\n    resetTimer()\n}\n\nfunction prevQuote() {\n    testoCurrentIndex = (testoCurrentIndex + 1) % quotes.length; // _ direction: rtl\n    updateSlider()\n    resetTimer()\n}\n\nfunction goToQuote(index) {\n    testoCurrentIndex = index\n    updateSlider()\n    resetTimer()\n}\n\nlet autoSlide = setInterval(nextQuote, 5000)\n\nfunction resetTimer() {\n    clearInterval(autoSlide);\n    autoSlide = setInterval(nextQuote, 5000)\n}\n\n\n\n//-- Touch event listeners for mobile dragging\nquoteWrapper.addEventListener(\"touchstart\", (e) => {\n    startX = e.touches[0].clientX\n    isDragging = true\n    quoteWrapper.style.transition = \"none\"\n})\n\nquoteWrapper.addEventListener(\"touchmove\", (e) => {\n    if (!isDragging) return\n    currentX = e.touches[0].clientX\n})\n\nquoteWrapper.addEventListener(\"touchend\", () => {\n    if (!isDragging) return;\n    isDragging = false;\n    quoteWrapper.style.transition = \"transform 0.3s ease-in-out\"\n\n    const diffX = startX - currentX\n    if (diffX > 50) nextQuote() // : Swipe left\n    else if (diffX < -50) prevQuote() // : Swipe right\n})\n","let txsldCurrentIndex = 0\nconst dynamicWordElement = document.querySelector('.dynamic-word')\n\nconst changeWord = _ => {\n    txsldCurrentIndex = (txsldCurrentIndex + 1) % textSlider.wordList.length\n    dynamicWordElement.textContent = textSlider.wordList[txsldCurrentIndex]\n}\n\nsetInterval(changeWord, textSlider.Interval)\nchangeWord()","if (\n    window.matchMedia && \n    window.matchMedia('(prefers-color-scheme: dark)').matches\n) {\n    html.setAttribute(\"data-theme\", \"dark\")\n} else {\n    html.setAttribute(\"data-theme\", \"light\")\n}\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener(\n    'change', e => {\n        const newColorScheme = e.matches ? \"dark\" : \"light\"\n        html.setAttribute(\"data-theme\", newColorScheme)\n    }\n)"]}